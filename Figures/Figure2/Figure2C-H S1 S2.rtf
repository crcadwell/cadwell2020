{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c0\c0\c0;
}
\margl1440\margr1440\vieww20300\viewh13120\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 counts <- read.delim("countdata.txt",header=F,sep="\\t",stringsAsFactors=F)\
counts <- counts[,1:224]\
samples <- read.delim("samplelist.txt",header=F,sep="\\t",stringsAsFactors=F)\
samples <- samples[1:224]\
genes <- read.delim("genelist.txt",header=F,sep="\\t",stringsAsFactors=F)\
genes <- genes[1:24070]\
rownames(counts) <- genes\
colnames(counts) <- samples\
\
library(scater)\
sce <- SingleCellExperiment(assays = list(counts=as.matrix(counts)))\
% dim(sce)\
% 24070   224\
\
% Add annotations from Datajoint\
annotations <- read.delim(file="annotations.txt", header=F, sep="\\t", stringsAsFactors=F)\
annotations <- annotations[,1:5]\
rownames(annotations) <- colnames(sce)\
colnames(annotations) <- cbind('firingPattern','region','layer','label','experiment')\
sce$firingPattern <- annotations[,1]\
sce$region <- annotations[,2]\
sce$layer <- annotations[,3]\
sce$label <- annotations[,4]\
sce$exp <- annotations[,5]\
\
% Remove cells from Morphology experiment (separate experiment)\
morpho <- colnames(sce) == "170406_p1_h11" | colnames(sce) == "170406_p2_a1" | colnames(sce) == "170406_p2_a4" | colnames(sce) == "170406_p2_a10" \
sce <- sce[,!morpho]\
% dim(sce)\
% 24070   220\
\
% Remove cells with interneuron firing patterns\
isFS <- sce$firingPattern=="fast spiking"\
isRS <- sce$firingPattern=="regular spiking"\
sce <- sce[,!(isFS | isRS)]\
% dim(sce)\
% 24070   217\
\
% Remove ERCCs and perform QC analysis of # reads / # genes\
is.spike <- grepl("ERCC",rownames(sce))\
sce <- sce[is.spike==FALSE,]\
sce <- calculateQCMetrics(sce)\
library(scran)\
libsize.drop <- isOutlier(sce$total_counts, nmads=3,type="lower", log=TRUE)\
feature.drop <- isOutlier(sce$total_features, nmads=3, type="lower", log=TRUE)\
par(mfrow=c(1,2))\
hist(log10(sce$total_counts), xlab=expression(Log[10]~"Library size (number of reads)"), main="", breaks=40, col="grey80",ylab="Number of cells")\
abline(v=log10(max(sce$total_counts[libsize.drop])), col="black", lwd=2, lty=2)\
hist(sce$total_features,xlab="Number of expressed genes", main="", breaks=40, col="grey80",ylab="Number of cells")\
abline(v=max(sce$total_features[feature.drop]), col="black", lwd=2, lty=2)\
sce <- sce[,!(libsize.drop | feature.drop)]\
data.frame(ByLibSize=sum(libsize.drop), ByFeature=sum(feature.drop), Remaining=ncol(sce))\
%  ByLibSize ByFeature Remaining\
%         11         8       206\
\
save(file="sceQCFiltered.RData",sce)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 write.table(file="sceQCfiltered.tsv", as.matrix(counts(sce)), sep="\\t", quote=FALSE, row.names=TRUE, col.names=TRUE)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \
% Identify genes with average count >1\
ave.counts <- calcAverage(sce)\
keep <- ave.counts >= 1\
sum(keep)\
hist(log10(ave.counts), breaks=100, main="", col="grey80", xlab=expression(Log[10]~"average count"))\
abline(v=log10(1), col="blue", lwd=2, lty=2)\
\
fontsize <- theme(axis.text=element_text(size=9), axis.title=element_text(size=16))\
plotQC(sce,type = "highest-expression", n=50) + fontsize\
\
numcells <- nexprs(sce, byrow=TRUE)\
alt.keep <- numcells >= 10\
sum(alt.keep)\
smoothScatter(log10(ave.counts), numcells, xlab=expression(Log[10]~"average count"), ylab="Number of expressing cells")\
\
sceKeep <- sce[keep,]\
sceKeep <- computeSumFactors(sceKeep, size=seq(20, 100, 10))\
summary(sizeFactors(sceKeep))\
%   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \
%0.02175 0.32970 0.69152 1.00000 1.32171 6.62900 \
plot(sizeFactors(sceKeep), sceKeep$total_counts/1e6, log="xy", ylab="Library size (millions)", xlab="Size factor")\
sceKeep <- normalize(sceKeep, exprs_values = "counts", return_log = FALSE, log_exprs_offset = NULL)\
sceKeep <- normalize(sceKeep, exprs_values = "counts", return_log = TRUE, log_exprs_offset = NULL)\
\
save(file="sceQCFilteredKeepGenes>1.RData",sceKeep)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 write.table(file="
\fs22 sceNormalizedCountsKeepGenes>1
\fs24 .tsv", as.matrix(normcounts(sceKeep)), sep="\\t", quote=FALSE, row.names=TRUE, col.names=TRUE)\
write.table(file="
\fs22 sceNormalizedLogCountsKeepGenes>1
\fs24 .tsv", as.matrix(logcounts(sceKeep)), sep="\\t", quote=FALSE, row.names=TRUE, col.names=TRUE)\
write.table(file="sceNormalizedCountsAnnotations.tsv", as.matrix(colData(sceKeep)[,1:5]), sep="\\t", quote=FALSE, row.names=TRUE, col.names=TRUE)
\fs22 \
\
ve <- plotExplanatoryVariables(sceKeep, theme_size = 10, method = "density", variables = c("layer","region","label","firingPattern","exp"))\
ve + scale_x_continuous() + coord_cartesian(xlim=c(0,5))\
plotColData(sceKeep, y="layer", x = "total_features", by_exprs_values = "logcounts")\
plotColData(sceKeep, y="layer", x = "total_counts", by_exprs_values = "logcounts")\
plotColData(sceKeep, y="region", x = "total_features", by_exprs_values = "logcounts")\
plotColData(sceKeep, y="region", x = "total_counts", by_exprs_values = "logcounts")\
plotColData(sceKeep, y="label", x = "total_features", by_exprs_values = "logcounts")\
plotColData(sceKeep, y="label", x = "total_counts", by_exprs_values = "logcounts")\

\fs24 feat_lay.aov <- aov(as.numeric(sceKeep$total_features) ~ as.character(sceKeep$layer))\
summary(feat_lay.aov)\
#             Df    Sum Sq Mean Sq F value Pr(>F)\
#layer         3   2972428  990809   0.517  0.671\
#Residuals   202 386835931 1915029\
feat_reg.aov <- aov(as.numeric(sceKeep$total_features) ~ as.character(sceKeep$region))\
summary(feat_reg.aov)\
#                              Df    Sum Sq  Mean Sq F value  Pr(>F)   \
#as.character(sceKeep$region)   2  22550301 11275151   6.232 0.00236 **\
#Residuals                    203 367258057  1809153 \
TukeyHSD(feat_reg.aov)\
#                 diff       lwr       upr     p adj\
#unknown-SS1 -497.2684 -1563.180  568.6436 0.5142675\
#V1-SS1      -690.4513 -1152.898 -228.0048 0.0015119\
#V1-unknown  -193.1829 -1239.465  853.0992 0.9006145  \
feat_lab.aov <- aov(as.numeric(sceKeep$total_features) ~ as.character(sceKeep$label))\
summary(feat_lab.aov)\
#                             Df    Sum Sq Mean Sq F value Pr(>F)\
#as.character(sceKeep$label)   1    470053  470053   0.246   0.62\
#Residuals                   204 389338306 1908521  \
count_lay.aov <- aov(as.numeric(sceKeep$total_counts) ~ as.character(sceKeep$layer))\
summary(count_lay.aov)\
#                             Df    Sum Sq   Mean Sq F value Pr(>F)  \
#as.character(sceKeep$layer)   3 2.446e+12 8.155e+11   2.677 0.0482 *\
#Residuals                   202 6.153e+13 3.046e+11 \
TukeyHSD(count_lay.aov)\
#            diff        lwr       upr     p adj\
#4-2/3  369895.31   28703.89 711086.72 0.0277870\
#5-2/3   83627.69 -135075.24 302330.62 0.7549762\
#6-2/3  135868.37 -289264.32 561001.07 0.8411777\
#5-4   -286267.62 -628686.54  56151.31 0.1364237\
#6-4   -234026.93 -734184.47 266130.60 0.6198712\
#6-5     52240.68 -373877.79 478359.15 0.9888847\
count_reg.aov <- aov(as.numeric(sceKeep$total_counts) ~ as.character(sceKeep$region))\
summary(count_reg.aov)\
#                              Df    Sum Sq   Mean Sq F value   Pr(>F)    \
#as.character(sceKeep$region)   2 4.893e+12 2.446e+12   8.405 0.000311 ***\
#Residuals                    203 5.908e+13 2.910e+11 \
TukeyHSD(count_reg.aov)\
#                 diff       lwr        upr     p adj\
#unknown-SS1  120843.9 -306685.7  548373.44 0.7826903\
#V1-SS1      -293387.8 -478871.7 -107903.92 0.0007121\
#V1-unknown  -414231.7 -833887.9    5424.45 0.0539011\
count_lab.aov <- aov(as.numeric(sceKeep$total_counts) ~ as.character(sceKeep$label))\
summary(count_lab.aov) \
#                             Df    Sum Sq   Mean Sq F value Pr(>F)\
#as.character(sceKeep$label)   1 1.430e+10 1.430e+10   0.046  0.831\
#Residuals                   204 6.396e+13 3.135e+11 
\fs22 \
\
var.fit <- trendVar(sceKeep, use.spikes = FALSE, design=NULL)\
var.out <- decomposeVar(sceKeep, var.fit)\
plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log expression", ylab="Variance of log expression")\
o <- order(var.out$mean)\
lines(var.out$mean[o], var.out$tech[o], col="dodger blue", lwd=2)\
\
hvg.out <- var.out[which(var.out$FDR <= 0.05 & var.out$bio >= 0.5),]\
hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]\
nrow(hvg.out)\
% 114\
write.table(file="hvg.tsv", as.matrix(hvg.out), sep="\\t", quote=FALSE, col.names=TRUE, row.names=TRUE)\
head(hvg.out)\
plotExpression(sceKeep, rownames(hvg.out)[1:25], alpha = 0.05, jitter="jitter") + fontsize\
\
set.seed(30)\
var.cor <- correlatePairs(sceKeep, subset.row=rownames(hvg.out), per.gene=FALSE)\
write.table(file="corPair.tsv", as.matrix(var.cor), sep="\\t", quote=FALSE, row.names=TRUE, col.names=TRUE)\
head(var.cor)\
\
var.cor <- correlatePairs(sceKeep, subset.row=rownames(hvg.out), per.gene=TRUE)\
write.table(file="corPairPerGene.tsv", as.matrix(var.cor), sep="\\t", quote=FALSE, row.names=TRUE, col.names=TRUE)\
head(var.cor)\
\
sig.cor <- var.cor$FDR <= 0.05\
summary(sig.cor)\
\
% Heatmap using highly variable and correlated genes\
chosen <- var.cor$gene[sig.cor]\

\fs24 norm.exprs <- exprs(sceKeep)[chosen,,drop=FALSE]\
heat.vals <- norm.exprs - rowMeans(norm.exprs)\
library(gplots)
\f1\fs30 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f0\fs24 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 heat.out <- heatmap.2(heat.vals, trace="none", col="bluered", symbreak = TRUE, cexRow = 0.6)
\fs22 \
\
sceKeepTSNE <- runTSNE(sceKeep[chosen,], run_args=list(perpelxity=30, rand_seed=30, exprs_values="logcounts", ncomponents=2))\
save(file="sceKeepTSNE>1.RData",sceKeepTSNE)\
plotReducedDim(sceKeepTSNE,"TSNE", colour_by="layer") \
plotReducedDim(sceKeepTSNE,"TSNE", colour_by="layer", shape_by="region") \
plotReducedDim(sceKeepTSNE,"TSNE", colour_by="label") \
plotReducedDim(sceKeepTSNE,"TSNE", colour_by="region") \
plotReducedDim(sceKeepTSNE,"TSNE", colour_by="firingPattern") \
plotReducedDim(sceKeepTSNE,"TSNE", colour_by="exp") \
tsne1 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[1])\
tsne2 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[2]) \
tsne3 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[3]) \
tsne4 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[4]) \
tsne5 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[5]) \
tsne6 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[6]) \
tsne7 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[7]) \
tsne8 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[8]) \
tsne9 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[9]) \
tsne10 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[10]) \
tsne11 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[11]) \
tsne12 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[12]) \
tsne13 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[13]) \
tsne14 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[14]) \
tsne15 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[15]) \
tsne16 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[16]) \
tsne17 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[17]) \
tsne18 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[18]) \
tsne19 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[19]) \
tsne20 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by=chosen[20]) \
\
multiplot(tsne1, tsne2, tsne3, tsne4, tsne5, tsne6, tsne7, tsne8, tsne9, tsne10, tsne11, tsne12, tsne13, tsne14, tsne15, tsne16, tsne17, tsne18, tsne19, tsne20, layout=matrix(c(1:1:20), nrow=4, byrow=TRUE))\
\
sceKeepPCA <- runPCA(sceKeep23[chosen,], run_args=list(exprs_values="logcounts", ncomponents=2))\
save(file="sceKeepPCA>1.RData",sceKeepPCA)\
plotReducedDim(sceKeepPCA,"PCA",colour_by="region")\
\
colour <- matrix(1,max(sceKeepTSNE$exp),dim(sceKeepTSNE)[2])\
for(i in 1:max(sceKeepTSNE$exp)) \{\
	colour[i,sceKeepTSNE$exp==i] <- 2\
	colour[i,sceKeepTSNE$exp==i & sceKeepTSNE$label=="positive"] <- 3\
\}\
\
sceKeepTSNE$colour <- colour[1,]\
tsne1 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour", add_legend=FALSE)\
sceKeepTSNE$colour <- colour[2,]\
tsne2 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[3,]\
tsne3 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[4,]\
tsne4 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[5,]\
tsne5 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[6,]\
tsne6 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[7,]\
tsne7 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[8,]\
tsne8 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[9,]\
tsne9 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[10,]\
tsne10 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[11,]\
tsne11 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[12,]\
tsne12 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[13,]\
tsne13 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[14,]\
tsne14 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[15,]\
tsne15 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
sceKeepTSNE$colour <- colour[16,]\
tsne16 <- plotReducedDim(sceKeepTSNE,"TSNE", colour_by="colour")\
\
multiplot(tsne1, tsne2, tsne3, tsne4, tsne5, tsne6, tsne7, tsne8, tsne9, tsne10, tsne11, tsne12, tsne13, tsne14, tsne15, tsne16, layout=matrix(c(1:1:16), nrow=4, byrow=TRUE))\
\
plotReducedDim(sceKeepTSNE[,sceKeepTSNE$label=="positive"],"TSNE", colour_by="exp") \
plotReducedDim(sceKeepTSNE[,sceKeepTSNE$label=="negative"],"TSNE", colour_by="exp")\
\
% How well can we predict layer?\
library("glmnet")\
f <- sceKeep$layer\
cvfit <- cv.glmnet(t(logcounts(sceKeep)),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20)\
error <- cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
errorSE <- cvfit$cvsd[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
fitPerm <- matrix(1,1000)\
for (i in 1:1000) \{\
	try(rm(cvfit))\
	f <- f[sample(1:length(f),length(f),replace=F)]\
	try(cvfit <- cv.glmnet(t(logcounts(sceKeep)),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20))\
	fitPerm[i] <- tryCatch(\{\
		cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
	\}, error = function(error_condition) \{\
		c("0")\
	\})\
\}\
fitPerm <- sort(fitPerm)\
library("Hmisc")\
x<- matrix(c(1, 1))\
y<- matrix(c(error, mean(fitPerm)))\
plot(x, y, pch=16, cex=0.6, xlab="1SE Fit", ylab="Misclassification Error",ylim=c(0,1))\
errbar(1, mean(fitPerm), fitPerm[round(length(fitPerm)*0.025)], fitPerm[round(length(fitPerm)*0.975)], add=TRUE)\
summary(factor(f))\
% 2/3   4   5   6 \
%  87  22  84  13 \
p <- length(fitPerm[fitPerm<error])/length(fitPerm)\
% p = 0 (<1/1000, 0.001)\
save(fitPerm,cvfit,error,errorSE,p,file="GLMLayerPred.RData")\
\
% How well can we predict region within L2/3?\
library("glmnet")\
set <- which(sceKeep$layer=="2/3" & sceKeep$region!="unknown")\
f <- sceKeep$region[set]\
cvfit <- cv.glmnet(t(logcounts(sceKeep[,set])),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20)\
error <- cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
errorSE <- cvfit$cvsd[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
fitPerm <- matrix(1,1000)\
for (i in 1:1000) \{\
	try(rm(cvfit))\
	f <- f[sample(1:length(f),length(f),replace=F)]\
	try(cvfit <- cv.glmnet(t(logcounts(sceKeep[,set])),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20))\
	fitPerm[i] <- tryCatch(\{\
		cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
	\}, error = function(error_condition) \{\
		c("0")\
	\})\
\}\
fitPerm <- sort(fitPerm)\
library("Hmisc")\
x<- matrix(c(1, 1))\
y<- matrix(c(error, mean(fitPerm)))\
plot(x, y, pch=16, cex=0.6, xlab="1SE Fit", ylab="Misclassification Error",ylim=c(0,1))\
errbar(1, mean(fitPerm), fitPerm[round(length(fitPerm)*0.025)], fitPerm[round(length(fitPerm)*0.975)], add=TRUE)\
summary(factor(f))\
% SS1  V1 \
%  22  63  \
p <- length(fitPerm[fitPerm<error])/length(fitPerm)\
% p = 0.001\
save(fitPerm,cvfit,error,errorSE,p,file="GLML23Pred.RData")\
\
% How well can we predict region within L4?\
library("glmnet")\
set <- which(sceKeep$layer=="4" & sceKeep$region!="unknown")\
f <- sceKeep$region[set]\
cvfit <- cv.glmnet(t(logcounts(sceKeep[,set])),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20)\
error <- cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
errorSE <- cvfit$cvsd[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
fitPerm <- matrix(1,1000)\
for (i in 1:1000) \{\
	try(rm(cvfit))\
	f <- f[sample(1:length(f),length(f),replace=F)]\
	try(cvfit <- cv.glmnet(t(logcounts(sceKeep[,set])),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20))\
	fitPerm[i] <- tryCatch(\{\
		cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
	\}, error = function(error_condition) \{\
		c("0")\
	\})\
\}\
fitPerm <- sort(fitPerm)\
library("Hmisc")\
x<- matrix(c(1, 1))\
y<- matrix(c(error, mean(fitPerm)))\
plot(x, y, pch=16, cex=0.6, xlab="1SE Fit", ylab="Misclassification Error",ylim=c(0,1))\
errbar(1, mean(fitPerm), fitPerm[round(length(fitPerm)*0.025)], fitPerm[round(length(fitPerm)*0.975)], add=TRUE)\
summary(factor(f))\
% SS1  V1 \
%  10  12 \
p <- length(fitPerm[fitPerm<error])/length(fitPerm)\
% 0.044\
save(fitPerm,cvfit,error,errorSE,p,file="GLML4.RData")\
\
% How well can we predict region within L5?\
library("glmnet")\
set <- which(sceKeep$layer=="5" & sceKeep$region!="unknown")\
f <- sceKeep$region[set]\
cvfit <- cv.glmnet(t(logcounts(sceKeep[,set])),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20)\
error <- cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
errorSE <- cvfit$cvsd[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
fitPerm <- matrix(1,1000)\
for (i in 1:1000) \{\
	try(rm(cvfit))\
	f <- f[sample(1:length(f),length(f),replace=F)]\
	try(cvfit <- cv.glmnet(t(logcounts(sceKeep[,set])),factor(f),family="multinomial",parallel=TRUE,type.measure="class",nfolds=20))\
	fitPerm[i] <- tryCatch(\{\
		cvfit$cvm[which(cvfit$lambda<=cvfit$lambda.min)[1]]\
	\}, error = function(error_condition) \{\
		c("0")\
	\})\
\}\
fitPerm <- sort(fitPerm)\
library("Hmisc")\
x<- matrix(c(1, 1))\
y<- matrix(c(error, mean(fitPerm)))\
plot(x, y, pch=16, cex=0.6, xlab="1SE Fit", ylab="Misclassification Error",ylim=c(0,1))\
errbar(1, mean(fitPerm), fitPerm[round(length(fitPerm)*0.025)], fitPerm[round(length(fitPerm)*0.975)], add=TRUE)\
summary(factor(f))\
% SS1  V1 \
%  42  35  \
p <- length(fitPerm[fitPerm<error])/length(fitPerm)\
% p = 0.03\
save(fitPerm,cvfit,error,errorSE,p,file="GLML5.RData")\
\
}